// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package port

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// PortsServiceClient is the client API for PortsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PortsServiceClient interface {
	GetPort(ctx context.Context, in *GetPortRequest, opts ...grpc.CallOption) (*Port, error)
	StreamImportedPorts(ctx context.Context, opts ...grpc.CallOption) (PortsService_StreamImportedPortsClient, error)
}

type portsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPortsServiceClient(cc grpc.ClientConnInterface) PortsServiceClient {
	return &portsServiceClient{cc}
}

func (c *portsServiceClient) GetPort(ctx context.Context, in *GetPortRequest, opts ...grpc.CallOption) (*Port, error) {
	out := new(Port)
	err := c.cc.Invoke(ctx, "/api.port.PortsService/GetPort", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portsServiceClient) StreamImportedPorts(ctx context.Context, opts ...grpc.CallOption) (PortsService_StreamImportedPortsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_PortsService_serviceDesc.Streams[0], "/api.port.PortsService/StreamImportedPorts", opts...)
	if err != nil {
		return nil, err
	}
	x := &portsServiceStreamImportedPortsClient{stream}
	return x, nil
}

type PortsService_StreamImportedPortsClient interface {
	Send(*Port) error
	CloseAndRecv() (*ImportPortsResponse, error)
	grpc.ClientStream
}

type portsServiceStreamImportedPortsClient struct {
	grpc.ClientStream
}

func (x *portsServiceStreamImportedPortsClient) Send(m *Port) error {
	return x.ClientStream.SendMsg(m)
}

func (x *portsServiceStreamImportedPortsClient) CloseAndRecv() (*ImportPortsResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ImportPortsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PortsServiceServer is the server API for PortsService service.
// All implementations must embed UnimplementedPortsServiceServer
// for forward compatibility
type PortsServiceServer interface {
	GetPort(context.Context, *GetPortRequest) (*Port, error)
	StreamImportedPorts(PortsService_StreamImportedPortsServer) error
	mustEmbedUnimplementedPortsServiceServer()
}

// UnimplementedPortsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPortsServiceServer struct {
}

func (UnimplementedPortsServiceServer) GetPort(context.Context, *GetPortRequest) (*Port, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPort not implemented")
}
func (UnimplementedPortsServiceServer) StreamImportedPorts(PortsService_StreamImportedPortsServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamImportedPorts not implemented")
}
func (UnimplementedPortsServiceServer) mustEmbedUnimplementedPortsServiceServer() {}

// UnsafePortsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PortsServiceServer will
// result in compilation errors.
type UnsafePortsServiceServer interface {
	mustEmbedUnimplementedPortsServiceServer()
}

func RegisterPortsServiceServer(s grpc.ServiceRegistrar, srv PortsServiceServer) {
	s.RegisterService(&_PortsService_serviceDesc, srv)
}

func _PortsService_GetPort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPortRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortsServiceServer).GetPort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.port.PortsService/GetPort",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortsServiceServer).GetPort(ctx, req.(*GetPortRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortsService_StreamImportedPorts_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PortsServiceServer).StreamImportedPorts(&portsServiceStreamImportedPortsServer{stream})
}

type PortsService_StreamImportedPortsServer interface {
	SendAndClose(*ImportPortsResponse) error
	Recv() (*Port, error)
	grpc.ServerStream
}

type portsServiceStreamImportedPortsServer struct {
	grpc.ServerStream
}

func (x *portsServiceStreamImportedPortsServer) SendAndClose(m *ImportPortsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *portsServiceStreamImportedPortsServer) Recv() (*Port, error) {
	m := new(Port)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _PortsService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.port.PortsService",
	HandlerType: (*PortsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPort",
			Handler:    _PortsService_GetPort_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamImportedPorts",
			Handler:       _PortsService_StreamImportedPorts_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "proto/api/port/port.proto",
}
